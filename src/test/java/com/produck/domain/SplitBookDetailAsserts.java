package com.produck.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SplitBookDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookDetailAllPropertiesEquals(SplitBookDetail expected, SplitBookDetail actual) {
        assertSplitBookDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertSplitBookDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookDetailAllUpdatablePropertiesEquals(SplitBookDetail expected, SplitBookDetail actual) {
        assertSplitBookDetailUpdatableFieldsEquals(expected, actual);
        assertSplitBookDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookDetailAutoGeneratedPropertiesEquals(SplitBookDetail expected, SplitBookDetail actual) {
        assertThat(expected)
            .as("Verify SplitBookDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookDetailUpdatableFieldsEquals(SplitBookDetail expected, SplitBookDetail actual) {
        assertThat(expected)
            .as("Verify SplitBookDetail relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPersonName()).as("check personName").isEqualTo(actual.getPersonName()))
            .satisfies(e -> assertThat(e.getTransactionDate()).as("check transactionDate").isEqualTo(actual.getTransactionDate()))
            .satisfies(e -> assertThat(e.getTransactionType()).as("check transactionType").isEqualTo(actual.getTransactionType()))
            .satisfies(e -> assertThat(e.getGroupId()).as("check groupId").isEqualTo(actual.getGroupId()))
            .satisfies(e -> assertThat(e.getJoinerRole()).as("check joinerRole").isEqualTo(actual.getJoinerRole()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookDetailUpdatableRelationshipsEquals(SplitBookDetail expected, SplitBookDetail actual) {
        assertThat(expected)
            .as("Verify SplitBookDetail relationships")
            .satisfies(e -> assertThat(e.getSplitBookJoiner()).as("check splitBookJoiner").isEqualTo(actual.getSplitBookJoiner()))
            .satisfies(e -> assertThat(e.getSplitBook()).as("check splitBook").isEqualTo(actual.getSplitBook()));
    }
}
