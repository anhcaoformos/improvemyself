package com.produck.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SplitBookAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookAllPropertiesEquals(SplitBook expected, SplitBook actual) {
        assertSplitBookAutoGeneratedPropertiesEquals(expected, actual);
        assertSplitBookAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookAllUpdatablePropertiesEquals(SplitBook expected, SplitBook actual) {
        assertSplitBookUpdatableFieldsEquals(expected, actual);
        assertSplitBookUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookAutoGeneratedPropertiesEquals(SplitBook expected, SplitBook actual) {
        assertThat(expected)
            .as("Verify SplitBook auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookUpdatableFieldsEquals(SplitBook expected, SplitBook actual) {
        assertThat(expected)
            .as("Verify SplitBook relevant properties")
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitBookUpdatableRelationshipsEquals(SplitBook expected, SplitBook actual) {
        assertThat(expected)
            .as("Verify SplitBook relationships")
            .satisfies(e -> assertThat(e.getApplicationUser()).as("check applicationUser").isEqualTo(actual.getApplicationUser()));
    }
}
